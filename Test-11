# Step 1. Create a new `Problem` instance. This will be the object where you define your variables and constraints.
problem = Problem()

# Step 2. Identify the LSAT game type and explain why.
# This game type is a grouping game because the participants are ambassadors being separated into groups of countries given certain rules and constraints.

# Step 3. Identify and define the variables. In this case, the variables are the ambassadors, and their domains are the countries they can be assigned to.
# Define the variables
countries = ['Venezuela', 'Yemen', 'Zambia']
# Define the domains
ambassadors = ['Jaramillo', 'Kayne', 'Landon', 'Novetzke', 'Ong']

#Step 4. # Identify any domains that require ordering and create a dictionary mapping numbers to the objects in the domain.
# In this case, the question is a simple grouping game and the countries do not need to be ordered, so we will not create a dictionary mapping numbers to the countries.

# Step 5. Add variables and domains to the problem
for country in countries:
    problem.addVariable(country, ambassadors)
    
# Step 6. Add the orignal constraints, including any contained in the question. Each rule translates to a constraint in your problem.

#Rule 1: One ambassador will be assigned to each country, and no ambassador will be assigned to more than one country.
problem.addConstraint(AllDifferentConstraint(), countries)

#Rule 2: Either Kayne or Novetzke, but not both, is assigned to one of the ambassadorships.
def rule_2_constraint(v, y, z):
    # If both Kayne and Novetzke are assigned to one of the ambassadorships, return False
    if v == 'Kayne' or y == 'Kayne' or z == 'Kayne':
        if v == 'Novetzke' or y == 'Novetzke' or z == 'Novetzke':
            return False
    # If neither Kayne nor Novetzke are assigned to one of the ambassadorships, return False
    if v == 'Novetzke' or y == 'Novetzke' or z == 'Novetzke':
        if v == 'Kayne' or y == 'Kayne' or z == 'Kayne':
            return False
    return True
problem.addConstraint(rule_2_constraint, ('Venezuela', 'Yemen', 'Zambia'))

#Rule 3: If Jaramillo is assigned to one of the ambassadorships, then so is Kayne.
def rule_3_constraint(v, y, z):
    if v == 'Jaramillo' or y == 'Jaramillo' or z == 'Jaramillo':
        if v != 'Kayne' and y != 'Kayne' and z != 'Kayne':
            return False
    return True
problem.addConstraint(rule_3_constraint, ('Venezuela', 'Yemen', 'Zambia'))

#Rule 4: If Ong is assigned as ambassador to Venezuela, Kayne is not assigned as ambassador to Yemen.
def rule_4_constraint(v, y):
    if v == 'Ong':
        if y == 'Kayne':
            return False
    return True
problem.addConstraint(rule_4_constraint, ('Venezuela', 'Yemen'))

#Rule 5: If Landon is assigned to an ambassadorship, it is to Zambia.
def rule_5_constraint(v, y, z):
    if v == 'Landon' or y == 'Landon':
            return False
    return True
problem.addConstraint(rule_5_constraint, ('Venezuela', 'Yemen', 'Zambia'))

#Question Constraint/Rule: The question does not contain any additional constraints/rules.

# Step 7. Determine all possible solutions that exist after applying the original rules stated above. These rules and constraints will be assumed and imposed on the answer choices below

solutions=problem.getSolutions()
#print(solutions)
#print(solutions[-10:])
#print("The possible solutions are: " + str(solutions))
#count the number of solutions
print("problem_201110_2-G_2_7_A The number of possible solutions is: " + str(len(solutions)))

# Step 8: Determine which pair of candidates who are NOT assigned to ambassadorships could be. 

# Answer A: Jaramillo and Novetzke
def answer_a():
    for solution in solutions:
        if solution['Venezuela'] != 'Jaramillo' and solution['Yemen'] != 'Jaramillo' and solution['Zambia'] != 'Jaramillo':
            if solution['Venezuela'] != 'Novetzke' and solution['Yemen'] != 'Novetzke' and solution['Zambia'] != 'Novetzke':
                return True
    return False
#print(answer_a())
print(str(answer_a()) + ' - Answer A: Jaramillo and Novetzke.')

# Answer B: Jaramillo and Ong
def answer_b():
    for solution in solutions:
        if solution['Venezuela'] != 'Jaramillo' and solution['Yemen'] != 'Jaramillo' and solution['Zambia'] != 'Jaramillo':
            if solution['Venezuela'] != 'Ong' and solution['Yemen'] != 'Ong' and solution['Zambia'] != 'Ong':
                return True
    return False
#print(answer_b())
print(str(answer_b()) + ' - Answer B: Jaramillo and Ong.')

# Answer C: Kayne and Landon
def answer_c():
    for solution in solutions:
        if solution['Venezuela'] != 'Kayne' and solution['Yemen'] != 'Kayne' and solution['Zambia'] != 'Kayne':
            if solution['Venezuela'] != 'Landon' and solution['Yemen'] != 'Landon' and solution['Zambia'] != 'Landon':
                return True
    return False
#print(answer_c())
print(str(answer_c()) + ' - Answer C: Kayne and Landon.')

# Answer D: Kayne and Novetzke
def answer_d():
    for solution in solutions:
        if solution['Venezuela'] != 'Kayne' and solution['Yemen'] != 'Kayne' and solution['Zambia'] != 'Kayne':
            if solution['Venezuela'] != 'Novetzke' and solution['Yemen'] != 'Novetzke' and solution['Zambia'] != 'Novetzke':
                return True
    return False
#print(answer_d())
print(str(answer_d()) + ' - Answer D: Kayne and Novetzke.')

# Answer E: Landon and Ong
def answer_e():
    for solution in solutions:
        if solution['Venezuela'] != 'Landon' and solution['Yemen'] != 'Landon' and solution['Zambia'] != 'Landon':
            if solution['Venezuela'] != 'Ong' and solution['Yemen'] != 'Ong' and solution['Zambia'] != 'Ong':
                return True
    return False
#print(answer_e())
print(str(answer_e()) + ' - Answer E: Landon and Ong.')

### Stop Problem #19 ###

### Problem #20:

#On the first day of a two-day study for a cycling magazine, four riders—Reynaldo, Seamus, Theresa, and Yuki—will each test one of four bicycles—F, G, H, and J. Each rider will then test a different one of the bicycles on the second day. Each rider tests only one bicycle per day, and all four bicycles are tested each day. The assignment of riders to bicycles is subject to the following conditions: Reynaldo cannot test F. Yuki cannot test J. Theresa must be one of the testers for H. The bicycle that Yuki tests on the first day must be tested by Seamus on the second day.	Any of the following could be true EXCEPT:	Reynaldo tests J on the first day.	Reynaldo tests J on the second day.	Seamus tests H on the first day.	Yuki tests H on the first day.	Yuki tests H on the second day.

# Question: Any of the following could be true EXCEPT:	Reynaldo tests J on the first day.	Reynaldo tests J on the second day.	Seamus tests H on the first day.	Yuki tests H on the first day.	Yuki tests H on the second day.


# Ideal: D

### Python Code ###

# Step 1. Create a new `Problem` instance. This will be the object where you define your variables and constraints.
problem = Problem()

# Step 2. Identify the LSAT game type and explain why.
# This game type is a grouping game because the participants are riders being separated into groups of bicycles given certain rules and constraints.

# Step 3. Identify and define the variables.
#The variables are the riders delimited by the day they test the bicycle.
riders = ['Reynaldo_Day1', 'Seamus_Day1', 'Theresa_Day1', 'Yuki_Day1', 'Reynaldo_Day2', 'Seamus_Day2', 'Theresa_Day2', 'Yuki_Day2']
#The domains are the bicycles.
bikes = ['F', 'G', 'H', 'J']

#Step 4. # Identify any domains that require ordering and create a dictionary mapping numbers to the objects in the domain.
# In this case, the question is a simple grouping game and the bicycles do not need to be ordered, so we will not create a dictionary mapping numbers to the bicycles.

# Step 5. Add variables and domains to the problem
for rider in riders:
    problem.addVariable(rider, bikes)
    
# Step 6. Add the orignal constraints, including any contained in the question. Each rule translates to a constraint in your problem.

#Rule 1: Each rider will then test a different one of the bicycles on the second day.
def rule_1_constraint(*args):
    day1, day2 = args[:4], args[4:]
    return len(set(day1)) == len(day1) and len(set(day2)) == len(day2) and not any(d1 == d2 for d1, d2 in zip(day1, day2))

problem.addConstraint(rule_1_constraint, riders)

#Rule 2: Each rider tests only one bicycle per day, and all four bicycles are tested each day.
# Each rider tests only one bicycle per day
#This rule is already satisfied by the fact that the riders are separated by the day they test the bicycle.

#all four bicycles are tested each day by checking to see if each bicycle is tested twice.
def rule_2_constraint(*riders):
    # Convert the rides to 1 if equal to F and otherwise 0
    F_rides = sum([1 if rider == 'F' else 0 for rider in riders])
    if F_rides != 2:
        return False
    # Convert the rides to 1 if equal to G and otherwise 0
    G_rides = sum([1 if rider == 'G' else 0 for rider in riders])
    if G_rides != 2:
        return False
    # Convert the rides to 1 if equal to H and otherwise 0
    H_rides = sum([1 if rider == 'H' else 0 for rider in riders])
    if H_rides != 2:
        return False
    # Convert the rides to 1 if equal to J and otherwise 0
    J_rides = sum([1 if rider == 'J' else 0 for rider in riders])
    if J_rides != 2:
        return False
    return True
problem.addConstraint(rule_2_constraint, riders)

#Rule 3: Reynaldo cannot test F.
def rule_3_constraint(reynaldo_day1, reynaldo_day2):
    if reynaldo_day1 == 'F':
        return False
    if reynaldo_day2 == 'F':
        return False
    return True
problem.addConstraint(rule_3_constraint, ('Reynaldo_Day1', 'Reynaldo_Day2'))

#Rule 4: Yuki cannot test J.
def rule_4_constraint(yuki_day1, yuki_day2):
    if yuki_day1 == 'J':
        return False
    if yuki_day2 == 'J':
        return False
    return True
problem.addConstraint(rule_4_constraint, ('Yuki_Day1', 'Yuki_Day2'))

#Rule 5: Theresa must be one of the testers for H.
def rule_5_constraint(theresa_day1, theresa_day2):
    if theresa_day1 =='H' or theresa_day2 =='H':
        return True
    return False
problem.addConstraint(rule_5_constraint, ('Theresa_Day1', 'Theresa_Day2'))

#Rule 7: The bicycle that Yuki tests on the first day must be tested by Seamus on the second day.
def rule_6_constraint(yuki_day1, seamus_day2):
    if yuki_day1 == 'F' and seamus_day2 != 'F':
        return False
    if yuki_day1 == 'G' and seamus_day2 != 'G':
        return False
    if yuki_day1 == 'H' and seamus_day2 != 'H':
        return False
    if yuki_day1 == 'J' and seamus_day2 != 'J':
        return False
    return True
problem.addConstraint(rule_6_constraint, ('Yuki_Day1', 'Seamus_Day2'))

#Question Rule: Any of the following could be true EXCEPT:
# The question rule does not contain any additional constraints.

# Step 7. Determine all possible solutions that exist after applying the original rules stated above. These rules and constraints will be assumed and imposed on the answer choices below
solutions = problem.getSolutions()
#print first 10 solutions
print("The first 10 possible solutions are: " + str(solutions[:10]))
#print("The possible solutions are: " + str(solutions))
#count the number of solutions
print("problem_201110_2-G_3_15_D The number of possible solutions is: " + str(len(solutions)))

# Step 8: Determine if ANY of the following COULD be true EXCEPT:
# If ANY answer choice SATISFIES the answer choice constraint, return False, otherwise return True.

# Answer A: Reynaldo tests J on the first day.
def answer_a():
    for solution in solutions:
        if solution['Reynaldo_Day1'] == 'J':
            return False
    return True
print(str(answer_a()) + ' - Answer A: Reynaldo tests J on the first day.')

# Answer B: Reynaldo tests J on the second day.
def answer_b():
    for solution in solutions:
        if solution['Reynaldo_Day2'] == 'J':
            return False
    return True
print(str(answer_b()) + ' - Answer B: Reynaldo tests J on the second day.')

# Answer C: Seamus tests H on the first day.
def answer_c():
    for solution in solutions:
        if solution['Seamus_Day1'] == 'H':
            return False
    return True
print(str(answer_c()) + ' - Answer C: Seamus tests H on the first day.')

# Answer D: Yuki tests H on the first day.
def answer_d():
    for solution in solutions:
        if solution['Yuki_Day1'] == 'H':
            return False
    return True
print(str(answer_d()) + ' - Answer D: Yuki tests H on the first day.')

# Answer E: Yuki tests H on the second day.
def answer_e():
    for solution in solutions:
        if solution['Yuki_Day2'] == 'H':
            return False
    return True
print(str(answer_e()) + ' - Answer E: Yuki tests H on the second day.')
