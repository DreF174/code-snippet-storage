#Before starting, import the `constraint` python module:
from constraint import Problem

# Step 1. Create a new `Problem` instance. This will be the object where you define your variables and constraints.
problem = Problem()
# Passage: A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce. Question: Which one of the following CANNOT be the type of cargo held in bay 4? A.\"grain\", B.\"livestock\", C.\"machinery\", D.\"produce\", E.\"textiles
# Step 2. Identify the LSAT game type and explain why.
# This game type is an assignment game because the participants are cargo being assigned to a certain bay,given certain rules and constraints.

#From reading the passage, we can discern that the variables we will be working with will be "Fuel, Grain, Livestock, Machinery, Produce, Textiles"  As "Cargos" and "One - Six " As the possible "Bays" for the cargos to be placed in:
# Step 3. Identify and define the variables of the problem.
# Define the variables
# The variables are the cargo
cargos = ['fuel', 'grain', 'livestock', 'machinery', 'produce', 'textiles']
# Define the domains
# Their domains are the bays they can be assigned to.
bays = ['one', 'two', 'three', 'four', 'five', 'six']

# After reading the passage, you will need to follow the information it gave you to properly create the constraints required to solve the problem:
#Step 4. # Identify any domains that require ordering and create a dictionary mapping numbers to the objects in the domain.
# In this case, the cargo needs to be ordered in the bays, so we will create a dictionary mapping numbers to each bay.
# Create a dictionary mapping the bays to numbers
bays = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six'}

# After creating the constraints, make sure to create the function to determine the possible solutions to the question:
# Step 5. Add variables and domains to the problem
for cargo in cargos:
    problem.addVariable(cargo, bays)

#Then you create the question constraint that MUST be followed, and create the functions for each possible answer to see if it will be marked as true or false:
# Step 6. Add the orignal constraints. Each rule translates to a constraint in your problem.

#Rule 1: Each bay is holding a different one of exactly six types of cargo
problem.addConstraint(AllDifferentConstraint(), cargos)

#Rule 2: The bay holding grain has a higher number than the bay holding livestock.
problem.addConstraint(lambda g, l: g > l, ('grain', 'livestock'))

#Rule 3: The bay holding livestock has a higher number than the bay holding textiles.
problem.addConstraint(lambda l, t: l > t, ('livestock', 'textiles'))

#Rule 4: The bay holding produce has a higher number than the bay holding fuel.
problem.addConstraint(lambda p, f: p > f, ('produce', 'fuel'))

#Rule 5: The bay holding textiles is next to the bay holding produce.
problem.addConstraint(lambda t, p: t == p + 1 or t == p - 1, ('textiles', 'produce'))


# Step 7. Determine all possible solutions that exist after applying the original rules stated above. These rules and constraints will be assumed and imposed on the answer choices below
solutions = problem.getSolutions()
#print(solutions)
#print("The possible solutions are: " + str(solutions))
#count the number of solutions
print("problem_dock_loading_1_A The number of possible solutions is: " + str(len(solutions)))

# Step 10: Determine if each answer choice is possible by adding the question constraint to the answer choice constraint and seeing if the answer choice is satisfied by the possible solutions.

# The Python function answer_a() is designed to iterate over a collection called solutions. If the function iterates over the entire solutions collection and does not find any item where the cargo in bay 4 is grain, it will return False.
def answer_a():
    for solution in solutions:
        # The cargo in bay 4 is grain
        if solution['grain'] == 4:
            return True
    return False
#print(answer_a())
print(str(answer_a()) + ' - Answer A: The cargo in bay 4 is grain.')

# The Python function answer_b() is designed to iterate over a collection called solutions. If the function iterates over the entire solutions collection and does not find any item where the cargo in bay 4 is livestock, it will return False.
def answer_b():
    for solution in solutions:
        # The cargo in bay 4 is livestock
        if solution['livestock'] == 4:
            return True
    return False
#print(answer_b())
print(str(answer_b()) + ' - Answer B: The cargo in bay 4 is livestock.')

# The Python function answer_c() is designed to iterate over a collection called solutions. If the function iterates over the entire solutions collection and does not find any item where the cargo in bay 4 is machinery, it will return False.
def answer_c():
    for solution in solutions:
        # The cargo in bay 4 is machinery
        if solution['machinery'] == 4:
            return True
    return False
#print(answer_c())
print(str(answer_c()) + ' - Answer C: The cargo in bay 4 is machinery.')

# The Python function answer_d() is designed to iterate over a collection called solutions. If the function iterates over the entire solutions collection and does not find any item where the cargo in bay 4 is produce, it will return False.
def answer_d():
    for solution in solutions:
        # The cargo in bay 4 is produce
        if solution['produce'] == 4:
            return True
    return False
#print(answer_d())
print(str(answer_d()) + ' - Answer D: The cargo in bay 4 is produce.')

# The Python function answer_e() is designed to iterate over a collection called solutions. If the function iterates over the entire solutions collection and does not find any item where the cargo in bay 4 is textiles, it will return False.
def answer_e():
    for solution in solutions:
        # The cargo in bay 4 is textiles
        if solution['textiles'] == 4:
            return True
    return False
#print(answer_e())
print(str(answer_e()) + ' - Answer E: The cargo in bay 4 is textiles.')
